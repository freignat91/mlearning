// Code generated by protoc-gen-go.
// source: mlserver/server/server.proto
// DO NOT EDIT!

/*
Package mlserver is a generated protocol buffer package.

It is generated from these files:
	mlserver/server/server.proto

It has these top-level messages:
	CreateNetworkRequest
	PropagateRequest
	PropagateReply
	BackPropagateRequest
	TrainRequest
	LoadTrainFileRequest
	DisplayRequest
	SelectNetworkRequest
	TestRequest
	EmptyReply
	LinesReply
*/
package mlserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateNetworkRequest struct {
	Layers []int32 `protobuf:"varint,3,rep,packed,name=layers" json:"layers,omitempty"`
}

func (m *CreateNetworkRequest) Reset()                    { *m = CreateNetworkRequest{} }
func (m *CreateNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNetworkRequest) ProtoMessage()               {}
func (*CreateNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateNetworkRequest) GetLayers() []int32 {
	if m != nil {
		return m.Layers
	}
	return nil
}

type PropagateRequest struct {
	InValues []float64 `protobuf:"fixed64,1,rep,packed,name=in_values,json=inValues" json:"in_values,omitempty"`
}

func (m *PropagateRequest) Reset()                    { *m = PropagateRequest{} }
func (m *PropagateRequest) String() string            { return proto.CompactTextString(m) }
func (*PropagateRequest) ProtoMessage()               {}
func (*PropagateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PropagateRequest) GetInValues() []float64 {
	if m != nil {
		return m.InValues
	}
	return nil
}

type PropagateReply struct {
	OutValues []float64 `protobuf:"fixed64,1,rep,packed,name=out_values,json=outValues" json:"out_values,omitempty"`
}

func (m *PropagateReply) Reset()                    { *m = PropagateReply{} }
func (m *PropagateReply) String() string            { return proto.CompactTextString(m) }
func (*PropagateReply) ProtoMessage()               {}
func (*PropagateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PropagateReply) GetOutValues() []float64 {
	if m != nil {
		return m.OutValues
	}
	return nil
}

type BackPropagateRequest struct {
	OutValues []float64 `protobuf:"fixed64,1,rep,packed,name=out_values,json=outValues" json:"out_values,omitempty"`
}

func (m *BackPropagateRequest) Reset()                    { *m = BackPropagateRequest{} }
func (m *BackPropagateRequest) String() string            { return proto.CompactTextString(m) }
func (*BackPropagateRequest) ProtoMessage()               {}
func (*BackPropagateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BackPropagateRequest) GetOutValues() []float64 {
	if m != nil {
		return m.OutValues
	}
	return nil
}

type TrainRequest struct {
	Name          string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Number        int32  `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
	All           bool   `protobuf:"varint,3,opt,name=all" json:"all,omitempty"`
	Hide          bool   `protobuf:"varint,4,opt,name=hide" json:"hide,omitempty"`
	CreateNetwork bool   `protobuf:"varint,5,opt,name=create_network,json=createNetwork" json:"create_network,omitempty"`
	Analyse       bool   `protobuf:"varint,6,opt,name=analyse" json:"analyse,omitempty"`
}

func (m *TrainRequest) Reset()                    { *m = TrainRequest{} }
func (m *TrainRequest) String() string            { return proto.CompactTextString(m) }
func (*TrainRequest) ProtoMessage()               {}
func (*TrainRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TrainRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TrainRequest) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *TrainRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *TrainRequest) GetHide() bool {
	if m != nil {
		return m.Hide
	}
	return false
}

func (m *TrainRequest) GetCreateNetwork() bool {
	if m != nil {
		return m.CreateNetwork
	}
	return false
}

func (m *TrainRequest) GetAnalyse() bool {
	if m != nil {
		return m.Analyse
	}
	return false
}

type LoadTrainFileRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *LoadTrainFileRequest) Reset()                    { *m = LoadTrainFileRequest{} }
func (m *LoadTrainFileRequest) String() string            { return proto.CompactTextString(m) }
func (*LoadTrainFileRequest) ProtoMessage()               {}
func (*LoadTrainFileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LoadTrainFileRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type DisplayRequest struct {
	Coef bool `protobuf:"varint,1,opt,name=coef" json:"coef,omitempty"`
}

func (m *DisplayRequest) Reset()                    { *m = DisplayRequest{} }
func (m *DisplayRequest) String() string            { return proto.CompactTextString(m) }
func (*DisplayRequest) ProtoMessage()               {}
func (*DisplayRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DisplayRequest) GetCoef() bool {
	if m != nil {
		return m.Coef
	}
	return false
}

type SelectNetworkRequest struct {
	NestId int32 `protobuf:"varint,1,opt,name=nest_id,json=nestId" json:"nest_id,omitempty"`
	AntId  int32 `protobuf:"varint,2,opt,name=ant_id,json=antId" json:"ant_id,omitempty"`
}

func (m *SelectNetworkRequest) Reset()                    { *m = SelectNetworkRequest{} }
func (m *SelectNetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*SelectNetworkRequest) ProtoMessage()               {}
func (*SelectNetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SelectNetworkRequest) GetNestId() int32 {
	if m != nil {
		return m.NestId
	}
	return 0
}

func (m *SelectNetworkRequest) GetAntId() int32 {
	if m != nil {
		return m.AntId
	}
	return 0
}

type TestRequest struct {
	NestId int32 `protobuf:"varint,1,opt,name=nest_id,json=nestId" json:"nest_id,omitempty"`
	AntId  int32 `protobuf:"varint,2,opt,name=ant_id,json=antId" json:"ant_id,omitempty"`
}

func (m *TestRequest) Reset()                    { *m = TestRequest{} }
func (m *TestRequest) String() string            { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()               {}
func (*TestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TestRequest) GetNestId() int32 {
	if m != nil {
		return m.NestId
	}
	return 0
}

func (m *TestRequest) GetAntId() int32 {
	if m != nil {
		return m.AntId
	}
	return 0
}

type EmptyReply struct {
}

func (m *EmptyReply) Reset()                    { *m = EmptyReply{} }
func (m *EmptyReply) String() string            { return proto.CompactTextString(m) }
func (*EmptyReply) ProtoMessage()               {}
func (*EmptyReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type LinesReply struct {
	Lines []string `protobuf:"bytes,1,rep,name=lines" json:"lines,omitempty"`
}

func (m *LinesReply) Reset()                    { *m = LinesReply{} }
func (m *LinesReply) String() string            { return proto.CompactTextString(m) }
func (*LinesReply) ProtoMessage()               {}
func (*LinesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *LinesReply) GetLines() []string {
	if m != nil {
		return m.Lines
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateNetworkRequest)(nil), "mlserver.CreateNetworkRequest")
	proto.RegisterType((*PropagateRequest)(nil), "mlserver.PropagateRequest")
	proto.RegisterType((*PropagateReply)(nil), "mlserver.PropagateReply")
	proto.RegisterType((*BackPropagateRequest)(nil), "mlserver.BackPropagateRequest")
	proto.RegisterType((*TrainRequest)(nil), "mlserver.TrainRequest")
	proto.RegisterType((*LoadTrainFileRequest)(nil), "mlserver.LoadTrainFileRequest")
	proto.RegisterType((*DisplayRequest)(nil), "mlserver.DisplayRequest")
	proto.RegisterType((*SelectNetworkRequest)(nil), "mlserver.SelectNetworkRequest")
	proto.RegisterType((*TestRequest)(nil), "mlserver.TestRequest")
	proto.RegisterType((*EmptyReply)(nil), "mlserver.EmptyReply")
	proto.RegisterType((*LinesReply)(nil), "mlserver.LinesReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MLearningService service

type MLearningServiceClient interface {
	CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	Propagate(ctx context.Context, in *PropagateRequest, opts ...grpc.CallOption) (*PropagateReply, error)
	BackPropagate(ctx context.Context, in *BackPropagateRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	Display(ctx context.Context, in *DisplayRequest, opts ...grpc.CallOption) (*LinesReply, error)
	LoadTrainFile(ctx context.Context, in *LoadTrainFileRequest, opts ...grpc.CallOption) (*LinesReply, error)
	Train(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*LinesReply, error)
	SelectNetwork(ctx context.Context, in *SelectNetworkRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*LinesReply, error)
}

type mLearningServiceClient struct {
	cc *grpc.ClientConn
}

func NewMLearningServiceClient(cc *grpc.ClientConn) MLearningServiceClient {
	return &mLearningServiceClient{cc}
}

func (c *mLearningServiceClient) CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := grpc.Invoke(ctx, "/mlserver.MLearningService/CreateNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLearningServiceClient) Propagate(ctx context.Context, in *PropagateRequest, opts ...grpc.CallOption) (*PropagateReply, error) {
	out := new(PropagateReply)
	err := grpc.Invoke(ctx, "/mlserver.MLearningService/Propagate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLearningServiceClient) BackPropagate(ctx context.Context, in *BackPropagateRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := grpc.Invoke(ctx, "/mlserver.MLearningService/BackPropagate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLearningServiceClient) Display(ctx context.Context, in *DisplayRequest, opts ...grpc.CallOption) (*LinesReply, error) {
	out := new(LinesReply)
	err := grpc.Invoke(ctx, "/mlserver.MLearningService/Display", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLearningServiceClient) LoadTrainFile(ctx context.Context, in *LoadTrainFileRequest, opts ...grpc.CallOption) (*LinesReply, error) {
	out := new(LinesReply)
	err := grpc.Invoke(ctx, "/mlserver.MLearningService/LoadTrainFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLearningServiceClient) Train(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*LinesReply, error) {
	out := new(LinesReply)
	err := grpc.Invoke(ctx, "/mlserver.MLearningService/Train", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLearningServiceClient) SelectNetwork(ctx context.Context, in *SelectNetworkRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := grpc.Invoke(ctx, "/mlserver.MLearningService/SelectNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLearningServiceClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*LinesReply, error) {
	out := new(LinesReply)
	err := grpc.Invoke(ctx, "/mlserver.MLearningService/Test", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MLearningService service

type MLearningServiceServer interface {
	CreateNetwork(context.Context, *CreateNetworkRequest) (*EmptyReply, error)
	Propagate(context.Context, *PropagateRequest) (*PropagateReply, error)
	BackPropagate(context.Context, *BackPropagateRequest) (*EmptyReply, error)
	Display(context.Context, *DisplayRequest) (*LinesReply, error)
	LoadTrainFile(context.Context, *LoadTrainFileRequest) (*LinesReply, error)
	Train(context.Context, *TrainRequest) (*LinesReply, error)
	SelectNetwork(context.Context, *SelectNetworkRequest) (*EmptyReply, error)
	Test(context.Context, *TestRequest) (*LinesReply, error)
}

func RegisterMLearningServiceServer(s *grpc.Server, srv MLearningServiceServer) {
	s.RegisterService(&_MLearningService_serviceDesc, srv)
}

func _MLearningService_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLearningServiceServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mlserver.MLearningService/CreateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLearningServiceServer).CreateNetwork(ctx, req.(*CreateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLearningService_Propagate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropagateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLearningServiceServer).Propagate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mlserver.MLearningService/Propagate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLearningServiceServer).Propagate(ctx, req.(*PropagateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLearningService_BackPropagate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackPropagateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLearningServiceServer).BackPropagate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mlserver.MLearningService/BackPropagate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLearningServiceServer).BackPropagate(ctx, req.(*BackPropagateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLearningService_Display_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLearningServiceServer).Display(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mlserver.MLearningService/Display",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLearningServiceServer).Display(ctx, req.(*DisplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLearningService_LoadTrainFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadTrainFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLearningServiceServer).LoadTrainFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mlserver.MLearningService/LoadTrainFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLearningServiceServer).LoadTrainFile(ctx, req.(*LoadTrainFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLearningService_Train_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLearningServiceServer).Train(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mlserver.MLearningService/Train",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLearningServiceServer).Train(ctx, req.(*TrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLearningService_SelectNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLearningServiceServer).SelectNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mlserver.MLearningService/SelectNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLearningServiceServer).SelectNetwork(ctx, req.(*SelectNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLearningService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLearningServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mlserver.MLearningService/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLearningServiceServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MLearningService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mlserver.MLearningService",
	HandlerType: (*MLearningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNetwork",
			Handler:    _MLearningService_CreateNetwork_Handler,
		},
		{
			MethodName: "Propagate",
			Handler:    _MLearningService_Propagate_Handler,
		},
		{
			MethodName: "BackPropagate",
			Handler:    _MLearningService_BackPropagate_Handler,
		},
		{
			MethodName: "Display",
			Handler:    _MLearningService_Display_Handler,
		},
		{
			MethodName: "LoadTrainFile",
			Handler:    _MLearningService_LoadTrainFile_Handler,
		},
		{
			MethodName: "Train",
			Handler:    _MLearningService_Train_Handler,
		},
		{
			MethodName: "SelectNetwork",
			Handler:    _MLearningService_SelectNetwork_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _MLearningService_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mlserver/server/server.proto",
}

func init() { proto.RegisterFile("mlserver/server/server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x5b, 0x6b, 0xdb, 0x30,
	0x14, 0xc6, 0xcb, 0xfd, 0xac, 0x09, 0x41, 0xb8, 0x9d, 0xc8, 0x2e, 0x04, 0xb3, 0x41, 0xd8, 0x43,
	0x02, 0x2b, 0x7d, 0xd8, 0xc3, 0x1e, 0x76, 0x49, 0xa1, 0x90, 0x8d, 0xe1, 0x96, 0xbd, 0x06, 0xd5,
	0x39, 0x6b, 0x45, 0x15, 0xd9, 0x93, 0xe4, 0x0c, 0xff, 0x93, 0xbd, 0xee, 0x9f, 0x0e, 0xcb, 0xf1,
	0x2c, 0x77, 0x0e, 0x83, 0x3e, 0xf9, 0x1c, 0x9d, 0xef, 0xe8, 0x3b, 0x97, 0xcf, 0x82, 0x67, 0x5b,
	0xa1, 0x51, 0xed, 0x50, 0x2d, 0x6a, 0x9f, 0x79, 0xa2, 0x62, 0x13, 0x93, 0x7e, 0x19, 0x0d, 0xe6,
	0xe0, 0x7f, 0x54, 0xc8, 0x0c, 0x7e, 0x41, 0xf3, 0x33, 0x56, 0x77, 0x21, 0xfe, 0x48, 0x51, 0x1b,
	0x72, 0x02, 0x5d, 0xc1, 0x32, 0x54, 0x9a, 0xb6, 0xa6, 0xad, 0x59, 0x27, 0xdc, 0x7b, 0xc1, 0x02,
	0xc6, 0x5f, 0x55, 0x9c, 0xb0, 0x1b, 0x66, 0xb0, 0xc4, 0x3e, 0x85, 0x01, 0x97, 0xeb, 0x1d, 0x13,
	0x29, 0x6a, 0xea, 0x4d, 0x5b, 0x33, 0x2f, 0xec, 0x73, 0xf9, 0xcd, 0xfa, 0xc1, 0x02, 0x46, 0x4e,
	0x42, 0x22, 0x32, 0xf2, 0x1c, 0x20, 0x4e, 0x4d, 0x1d, 0x3f, 0x88, 0x53, 0xb3, 0x4f, 0x38, 0x03,
	0xff, 0x03, 0x8b, 0xee, 0xfe, 0x61, 0xf9, 0x4f, 0xda, 0x6f, 0x0f, 0x8e, 0xae, 0x14, 0xe3, 0xb2,
	0xc4, 0x13, 0x68, 0x4b, 0xb6, 0x45, 0xea, 0x4d, 0xbd, 0xd9, 0x20, 0xb4, 0x76, 0xde, 0x95, 0x4c,
	0xb7, 0xd7, 0xa8, 0xe8, 0xa3, 0xa9, 0x97, 0x77, 0x55, 0x78, 0x64, 0x0c, 0x2d, 0x26, 0x04, 0x6d,
	0x4d, 0xbd, 0x59, 0x3f, 0xcc, 0xcd, 0x3c, 0xfb, 0x96, 0x6f, 0x90, 0xb6, 0xed, 0x91, 0xb5, 0xc9,
	0x2b, 0x18, 0x45, 0x76, 0x56, 0x6b, 0x59, 0x0c, 0x8b, 0x76, 0x6c, 0x74, 0x18, 0xb9, 0x13, 0x24,
	0x14, 0x7a, 0x4c, 0x32, 0x91, 0x69, 0xa4, 0x5d, 0x1b, 0x2f, 0xdd, 0xe0, 0x35, 0xf8, 0xab, 0x98,
	0x6d, 0x6c, 0x99, 0xe7, 0x5c, 0xa0, 0x53, 0x6a, 0xc2, 0xcc, 0x6d, 0x59, 0x6a, 0x6e, 0x07, 0x2f,
	0x61, 0xf4, 0x89, 0xeb, 0x44, 0xb0, 0xcc, 0x41, 0x45, 0x31, 0x7e, 0xb7, 0xa8, 0x7e, 0x68, 0xed,
	0xe0, 0x1c, 0xfc, 0x4b, 0x14, 0x18, 0x99, 0x7b, 0xeb, 0x7b, 0x02, 0x3d, 0x89, 0xda, 0xac, 0xf9,
	0xc6, 0xc2, 0xf3, 0x4e, 0x51, 0x9b, 0x8b, 0x0d, 0x39, 0x86, 0x2e, 0x93, 0xf6, 0xbc, 0x98, 0x40,
	0x87, 0x49, 0x73, 0xb1, 0x09, 0xde, 0xc1, 0xe3, 0x2b, 0xd4, 0xe6, 0xa1, 0xe9, 0x47, 0x00, 0xcb,
	0x6d, 0x62, 0x32, 0xbb, 0xe0, 0x20, 0x00, 0x58, 0x71, 0x89, 0xba, 0x58, 0xb7, 0x0f, 0x1d, 0x91,
	0x7b, 0x76, 0x65, 0x83, 0xb0, 0x70, 0xde, 0xfc, 0x6a, 0xc3, 0xf8, 0xf3, 0x0a, 0x99, 0x92, 0x5c,
	0xde, 0x5c, 0xa2, 0xda, 0xf1, 0x08, 0xc9, 0x12, 0x86, 0x35, 0x31, 0x92, 0x17, 0xf3, 0x52, 0xa8,
	0xf3, 0x26, 0x95, 0x4e, 0xfc, 0x2a, 0x5e, 0xf1, 0x93, 0xf7, 0x30, 0xf8, 0xab, 0x1e, 0x32, 0xa9,
	0x20, 0xf7, 0x25, 0x35, 0xa1, 0x8d, 0xb1, 0xfc, 0x8a, 0x25, 0x0c, 0x6b, 0x22, 0x74, 0x2b, 0x69,
	0x52, 0xe7, 0x81, 0x4a, 0xde, 0x42, 0x6f, 0xbf, 0x44, 0xe2, 0x70, 0xd5, 0xf7, 0xea, 0xa6, 0x3a,
	0x63, 0x5b, 0xc2, 0xb0, 0xa6, 0x15, 0xb7, 0x82, 0x26, 0x11, 0x1d, 0xb8, 0xe6, 0x0c, 0x3a, 0x16,
	0x49, 0x4e, 0xaa, 0xb0, 0xfb, 0x9b, 0x1c, 0x66, 0xaf, 0xe9, 0xca, 0x65, 0x6f, 0x12, 0xdc, 0x81,
	0xfe, 0x4f, 0xa1, 0x9d, 0xcb, 0x8a, 0x1c, 0x3b, 0xe4, 0x95, 0xcc, 0x9a, 0xb9, 0xaf, 0xbb, 0xf6,
	0x8d, 0x3a, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0xca, 0x15, 0x1b, 0xa5, 0xc3, 0x04, 0x00, 0x00,
}
